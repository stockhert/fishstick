import type { AttemptFirstFactorParams, AttemptSecondFactorParams, AuthenticateWithPasskeyParams, AuthenticateWithPopupParams, AuthenticateWithRedirectParams, AuthenticateWithWeb3Params, CreateEmailLinkFlowReturn, PrepareFirstFactorParams, PrepareSecondFactorParams, ResetPasswordParams, SignInCreateParams, SignInFirstFactor, SignInFutureBackupCodeVerifyParams, SignInFutureCreateParams, SignInFutureEmailCodeSendParams, SignInFutureEmailCodeVerifyParams, SignInFutureFinalizeParams, SignInFutureMFAPhoneCodeVerifyParams, SignInFuturePasswordParams, SignInFuturePhoneCodeSendParams, SignInFuturePhoneCodeVerifyParams, SignInFutureResetPasswordSubmitParams, SignInFutureResource, SignInFutureSSOParams, SignInFutureTOTPVerifyParams, SignInIdentifier, SignInJSON, SignInJSONSnapshot, SignInResource, SignInSecondFactor, SignInStartEmailLinkFlowParams, SignInStatus, VerificationResource } from '@clerk/types';
import { createValidatePassword } from '../../utils/passwords/password';
import { BaseResource, UserData } from './internal';
export declare class SignIn extends BaseResource implements SignInResource {
    pathRoot: string;
    id?: string;
    private _status;
    supportedIdentifiers: SignInIdentifier[];
    supportedFirstFactors: SignInFirstFactor[] | null;
    supportedSecondFactors: SignInSecondFactor[] | null;
    firstFactorVerification: VerificationResource;
    secondFactorVerification: VerificationResource;
    identifier: string | null;
    createdSessionId: string | null;
    userData: UserData;
    /**
     * The current status of the sign-in process.
     *
     * @returns The current sign-in status, or null if no status has been set
     */
    get status(): SignInStatus | null;
    /**
     * Sets the sign-in status and logs the transition at debug level.
     *
     * @param value - The new status to set. Can be null to clear the status.
     * @remarks When setting a new status that differs from the previous one,
     * a debug log entry is created showing the transition from the old to new status.
     */
    set status(value: SignInStatus | null);
    /**
     * @experimental This experimental API is subject to change.
     *
     * An instance of `SignInFuture`, which has a different API than `SignIn`, intended to be used in custom flows.
     */
    __internal_future: SignInFuture;
    /**
     * @internal Only used for internal purposes, and is not intended to be used directly.
     *
     * This property is used to provide access to underlying Client methods to `SignInFuture`, which wraps an instance
     * of `SignIn`.
     */
    __internal_basePost: <J extends import("@clerk/types").ClerkResourceJSON | null>(params?: import("./Base").BaseMutateParams) => Promise<this>;
    constructor(data?: SignInJSON | SignInJSONSnapshot | null);
    create: (params: SignInCreateParams) => Promise<SignInResource>;
    resetPassword: (params: ResetPasswordParams) => Promise<SignInResource>;
    prepareFirstFactor: (params: PrepareFirstFactorParams) => Promise<SignInResource>;
    attemptFirstFactor: (params: AttemptFirstFactorParams) => Promise<SignInResource>;
    createEmailLinkFlow: () => CreateEmailLinkFlowReturn<SignInStartEmailLinkFlowParams, SignInResource>;
    prepareSecondFactor: (params: PrepareSecondFactorParams) => Promise<SignInResource>;
    attemptSecondFactor: (params: AttemptSecondFactorParams) => Promise<SignInResource>;
    private authenticateWithRedirectOrPopup;
    authenticateWithRedirect: (params: AuthenticateWithRedirectParams) => Promise<void>;
    authenticateWithPopup: (params: AuthenticateWithPopupParams) => Promise<void>;
    authenticateWithWeb3: (params: AuthenticateWithWeb3Params) => Promise<SignInResource>;
    authenticateWithMetamask: () => Promise<SignInResource>;
    authenticateWithCoinbaseWallet: () => Promise<SignInResource>;
    authenticateWithBase: () => Promise<SignInResource>;
    authenticateWithOKXWallet: () => Promise<SignInResource>;
    authenticateWithPasskey: (params?: AuthenticateWithPasskeyParams) => Promise<SignInResource>;
    validatePassword: ReturnType<typeof createValidatePassword>;
    protected fromJSON(data: SignInJSON | SignInJSONSnapshot | null): this;
    __internal_toSnapshot(): SignInJSONSnapshot;
}
declare class SignInFuture implements SignInFutureResource {
    readonly resource: SignIn;
    emailCode: {
        sendCode: (params: SignInFutureEmailCodeSendParams) => Promise<{
            error: unknown;
        }>;
        verifyCode: (params: SignInFutureEmailCodeVerifyParams) => Promise<{
            error: unknown;
        }>;
    };
    resetPasswordEmailCode: {
        sendCode: () => Promise<{
            error: unknown;
        }>;
        verifyCode: (params: SignInFutureEmailCodeVerifyParams) => Promise<{
            error: unknown;
        }>;
        submitPassword: (params: SignInFutureResetPasswordSubmitParams) => Promise<{
            error: unknown;
        }>;
    };
    phoneCode: {
        sendCode: (params: SignInFuturePhoneCodeSendParams) => Promise<{
            error: unknown;
        }>;
        verifyCode: (params: SignInFuturePhoneCodeVerifyParams) => Promise<{
            error: unknown;
        }>;
    };
    mfa: {
        sendPhoneCode: () => Promise<{
            error: unknown;
        }>;
        verifyPhoneCode: (params: SignInFutureMFAPhoneCodeVerifyParams) => Promise<{
            error: unknown;
        }>;
        verifyTOTP: (params: SignInFutureTOTPVerifyParams) => Promise<{
            error: unknown;
        }>;
        verifyBackupCode: (params: SignInFutureBackupCodeVerifyParams) => Promise<{
            error: unknown;
        }>;
    };
    constructor(resource: SignIn);
    get status(): SignInStatus | null;
    get availableStrategies(): SignInFirstFactor[];
    get isTransferable(): boolean;
    get existingSession(): {
        sessionId: string;
    } | undefined;
    sendResetPasswordEmailCode(): Promise<{
        error: unknown;
    }>;
    verifyResetPasswordEmailCode(params: SignInFutureEmailCodeVerifyParams): Promise<{
        error: unknown;
    }>;
    submitResetPassword(params: SignInFutureResetPasswordSubmitParams): Promise<{
        error: unknown;
    }>;
    create(params: SignInFutureCreateParams): Promise<{
        error: unknown;
    }>;
    password(params: SignInFuturePasswordParams): Promise<{
        error: unknown;
    }>;
    sendEmailCode(params: SignInFutureEmailCodeSendParams): Promise<{
        error: unknown;
    }>;
    verifyEmailCode(params: SignInFutureEmailCodeVerifyParams): Promise<{
        error: unknown;
    }>;
    sendPhoneCode(params: SignInFuturePhoneCodeSendParams): Promise<{
        error: unknown;
    }>;
    verifyPhoneCode(params: SignInFuturePhoneCodeVerifyParams): Promise<{
        error: unknown;
    }>;
    sso(params: SignInFutureSSOParams): Promise<{
        error: unknown;
    }>;
    sendMFAPhoneCode(): Promise<{
        error: unknown;
    }>;
    verifyMFAPhoneCode(params: SignInFutureMFAPhoneCodeVerifyParams): Promise<{
        error: unknown;
    }>;
    verifyTOTP(params: SignInFutureTOTPVerifyParams): Promise<{
        error: unknown;
    }>;
    verifyBackupCode(params: SignInFutureBackupCodeVerifyParams): Promise<{
        error: unknown;
    }>;
    finalize(params?: SignInFutureFinalizeParams): Promise<{
        error: unknown;
    }>;
}
export {};
