import { colorOptionToThemedAlphaScale } from '../utils/colors/scales';
declare const whiteAlpha: Readonly<{
    readonly whiteAlpha25: "hsla(0, 0%, 100%, 0.02)";
    readonly whiteAlpha50: "hsla(0, 0%, 100%, 0.03)";
    readonly whiteAlpha100: "hsla(0, 0%, 100%, 0.07)";
    readonly whiteAlpha150: "hsla(0, 0%, 100%, 0.11)";
    readonly whiteAlpha200: "hsla(0, 0%, 100%, 0.15)";
    readonly whiteAlpha300: "hsla(0, 0%, 100%, 0.28)";
    readonly whiteAlpha400: "hsla(0, 0%, 100%, 0.41)";
    readonly whiteAlpha500: "hsla(0, 0%, 100%, 0.53)";
    readonly whiteAlpha600: "hsla(0, 0%, 100%, 0.62)";
    readonly whiteAlpha700: "hsla(0, 0%, 100%, 0.73)";
    readonly whiteAlpha750: "hsla(0, 0%, 100%, 0.78)";
    readonly whiteAlpha800: "hsla(0, 0%, 100%, 0.81)";
    readonly whiteAlpha850: "hsla(0, 0%, 100%, 0.84)";
    readonly whiteAlpha900: "hsla(0, 0%, 100%, 0.87)";
    readonly whiteAlpha950: "hsla(0, 0%, 100%, 0.92)";
}>;
type AlphaScale<T extends string> = NonNullable<ReturnType<typeof colorOptionToThemedAlphaScale<T>>>;
declare const neutralAlphaScale: AlphaScale<"neutralAlpha">;
declare const colors: Readonly<{
    readonly borderAlpha300: import("@clerk/types").HslaColorString;
    readonly borderAlpha600: import("@clerk/types").HslaColorString;
    readonly borderAlpha25: import("@clerk/types").HslaColorString;
    readonly borderAlpha50: import("@clerk/types").HslaColorString;
    readonly borderAlpha100: import("@clerk/types").HslaColorString;
    readonly borderAlpha150: import("@clerk/types").HslaColorString;
    readonly borderAlpha200: import("@clerk/types").HslaColorString;
    readonly borderAlpha400: import("@clerk/types").HslaColorString;
    readonly borderAlpha500: import("@clerk/types").HslaColorString;
    readonly borderAlpha700: import("@clerk/types").HslaColorString;
    readonly borderAlpha750: import("@clerk/types").HslaColorString;
    readonly borderAlpha800: import("@clerk/types").HslaColorString;
    readonly borderAlpha850: import("@clerk/types").HslaColorString;
    readonly borderAlpha900: import("@clerk/types").HslaColorString;
    readonly borderAlpha950: import("@clerk/types").HslaColorString;
    readonly successAlpha300: import("@clerk/types").HslaColorString;
    readonly successAlpha600: import("@clerk/types").HslaColorString;
    readonly successAlpha25: import("@clerk/types").HslaColorString;
    readonly successAlpha50: import("@clerk/types").HslaColorString;
    readonly successAlpha100: import("@clerk/types").HslaColorString;
    readonly successAlpha150: import("@clerk/types").HslaColorString;
    readonly successAlpha200: import("@clerk/types").HslaColorString;
    readonly successAlpha400: import("@clerk/types").HslaColorString;
    readonly successAlpha500: import("@clerk/types").HslaColorString;
    readonly successAlpha700: import("@clerk/types").HslaColorString;
    readonly successAlpha750: import("@clerk/types").HslaColorString;
    readonly successAlpha800: import("@clerk/types").HslaColorString;
    readonly successAlpha850: import("@clerk/types").HslaColorString;
    readonly successAlpha900: import("@clerk/types").HslaColorString;
    readonly successAlpha950: import("@clerk/types").HslaColorString;
    readonly success300: import("@clerk/types").HslaColorString;
    readonly success600: import("@clerk/types").HslaColorString;
    readonly success25: import("@clerk/types").HslaColorString;
    readonly success50: import("@clerk/types").HslaColorString;
    readonly success100: import("@clerk/types").HslaColorString;
    readonly success150: import("@clerk/types").HslaColorString;
    readonly success200: import("@clerk/types").HslaColorString;
    readonly success400: import("@clerk/types").HslaColorString;
    readonly success500: import("@clerk/types").HslaColorString;
    readonly success700: import("@clerk/types").HslaColorString;
    readonly success750: import("@clerk/types").HslaColorString;
    readonly success800: import("@clerk/types").HslaColorString;
    readonly success850: import("@clerk/types").HslaColorString;
    readonly success900: import("@clerk/types").HslaColorString;
    readonly success950: import("@clerk/types").HslaColorString;
    readonly warningAlpha300: import("@clerk/types").HslaColorString;
    readonly warningAlpha600: import("@clerk/types").HslaColorString;
    readonly warningAlpha25: import("@clerk/types").HslaColorString;
    readonly warningAlpha50: import("@clerk/types").HslaColorString;
    readonly warningAlpha100: import("@clerk/types").HslaColorString;
    readonly warningAlpha150: import("@clerk/types").HslaColorString;
    readonly warningAlpha200: import("@clerk/types").HslaColorString;
    readonly warningAlpha400: import("@clerk/types").HslaColorString;
    readonly warningAlpha500: import("@clerk/types").HslaColorString;
    readonly warningAlpha700: import("@clerk/types").HslaColorString;
    readonly warningAlpha750: import("@clerk/types").HslaColorString;
    readonly warningAlpha800: import("@clerk/types").HslaColorString;
    readonly warningAlpha850: import("@clerk/types").HslaColorString;
    readonly warningAlpha900: import("@clerk/types").HslaColorString;
    readonly warningAlpha950: import("@clerk/types").HslaColorString;
    readonly warning300: import("@clerk/types").HslaColorString;
    readonly warning600: import("@clerk/types").HslaColorString;
    readonly warning25: import("@clerk/types").HslaColorString;
    readonly warning50: import("@clerk/types").HslaColorString;
    readonly warning100: import("@clerk/types").HslaColorString;
    readonly warning150: import("@clerk/types").HslaColorString;
    readonly warning200: import("@clerk/types").HslaColorString;
    readonly warning400: import("@clerk/types").HslaColorString;
    readonly warning500: import("@clerk/types").HslaColorString;
    readonly warning700: import("@clerk/types").HslaColorString;
    readonly warning750: import("@clerk/types").HslaColorString;
    readonly warning800: import("@clerk/types").HslaColorString;
    readonly warning850: import("@clerk/types").HslaColorString;
    readonly warning900: import("@clerk/types").HslaColorString;
    readonly warning950: import("@clerk/types").HslaColorString;
    readonly dangerAlpha300: import("@clerk/types").HslaColorString;
    readonly dangerAlpha600: import("@clerk/types").HslaColorString;
    readonly dangerAlpha25: import("@clerk/types").HslaColorString;
    readonly dangerAlpha50: import("@clerk/types").HslaColorString;
    readonly dangerAlpha100: import("@clerk/types").HslaColorString;
    readonly dangerAlpha150: import("@clerk/types").HslaColorString;
    readonly dangerAlpha200: import("@clerk/types").HslaColorString;
    readonly dangerAlpha400: import("@clerk/types").HslaColorString;
    readonly dangerAlpha500: import("@clerk/types").HslaColorString;
    readonly dangerAlpha700: import("@clerk/types").HslaColorString;
    readonly dangerAlpha750: import("@clerk/types").HslaColorString;
    readonly dangerAlpha800: import("@clerk/types").HslaColorString;
    readonly dangerAlpha850: import("@clerk/types").HslaColorString;
    readonly dangerAlpha900: import("@clerk/types").HslaColorString;
    readonly dangerAlpha950: import("@clerk/types").HslaColorString;
    readonly danger300: import("@clerk/types").HslaColorString;
    readonly danger600: import("@clerk/types").HslaColorString;
    readonly danger25: import("@clerk/types").HslaColorString;
    readonly danger50: import("@clerk/types").HslaColorString;
    readonly danger100: import("@clerk/types").HslaColorString;
    readonly danger150: import("@clerk/types").HslaColorString;
    readonly danger200: import("@clerk/types").HslaColorString;
    readonly danger400: import("@clerk/types").HslaColorString;
    readonly danger500: import("@clerk/types").HslaColorString;
    readonly danger700: import("@clerk/types").HslaColorString;
    readonly danger750: import("@clerk/types").HslaColorString;
    readonly danger800: import("@clerk/types").HslaColorString;
    readonly danger850: import("@clerk/types").HslaColorString;
    readonly danger900: import("@clerk/types").HslaColorString;
    readonly danger950: import("@clerk/types").HslaColorString;
    readonly primaryAlpha300: import("@clerk/types").HslaColorString;
    readonly primaryAlpha600: import("@clerk/types").HslaColorString;
    readonly primaryAlpha25: import("@clerk/types").HslaColorString;
    readonly primaryAlpha50: import("@clerk/types").HslaColorString;
    readonly primaryAlpha100: import("@clerk/types").HslaColorString;
    readonly primaryAlpha150: import("@clerk/types").HslaColorString;
    readonly primaryAlpha200: import("@clerk/types").HslaColorString;
    readonly primaryAlpha400: import("@clerk/types").HslaColorString;
    readonly primaryAlpha500: import("@clerk/types").HslaColorString;
    readonly primaryAlpha700: import("@clerk/types").HslaColorString;
    readonly primaryAlpha750: import("@clerk/types").HslaColorString;
    readonly primaryAlpha800: import("@clerk/types").HslaColorString;
    readonly primaryAlpha850: import("@clerk/types").HslaColorString;
    readonly primaryAlpha900: import("@clerk/types").HslaColorString;
    readonly primaryAlpha950: import("@clerk/types").HslaColorString;
    readonly primaryHover: string | undefined;
    readonly primary300: import("@clerk/types").HslaColorString;
    readonly primary600: import("@clerk/types").HslaColorString;
    readonly primary25: import("@clerk/types").HslaColorString;
    readonly primary50: import("@clerk/types").HslaColorString;
    readonly primary100: import("@clerk/types").HslaColorString;
    readonly primary150: import("@clerk/types").HslaColorString;
    readonly primary200: import("@clerk/types").HslaColorString;
    readonly primary400: import("@clerk/types").HslaColorString;
    readonly primary500: import("@clerk/types").HslaColorString;
    readonly primary700: import("@clerk/types").HslaColorString;
    readonly primary750: import("@clerk/types").HslaColorString;
    readonly primary800: import("@clerk/types").HslaColorString;
    readonly primary850: import("@clerk/types").HslaColorString;
    readonly primary900: import("@clerk/types").HslaColorString;
    readonly primary950: import("@clerk/types").HslaColorString;
    readonly whiteAlpha25: "hsla(0, 0%, 100%, 0.02)";
    readonly whiteAlpha50: "hsla(0, 0%, 100%, 0.03)";
    readonly whiteAlpha100: "hsla(0, 0%, 100%, 0.07)";
    readonly whiteAlpha150: "hsla(0, 0%, 100%, 0.11)";
    readonly whiteAlpha200: "hsla(0, 0%, 100%, 0.15)";
    readonly whiteAlpha300: "hsla(0, 0%, 100%, 0.28)";
    readonly whiteAlpha400: "hsla(0, 0%, 100%, 0.41)";
    readonly whiteAlpha500: "hsla(0, 0%, 100%, 0.53)";
    readonly whiteAlpha600: "hsla(0, 0%, 100%, 0.62)";
    readonly whiteAlpha700: "hsla(0, 0%, 100%, 0.73)";
    readonly whiteAlpha750: "hsla(0, 0%, 100%, 0.78)";
    readonly whiteAlpha800: "hsla(0, 0%, 100%, 0.81)";
    readonly whiteAlpha850: "hsla(0, 0%, 100%, 0.84)";
    readonly whiteAlpha900: "hsla(0, 0%, 100%, 0.87)";
    readonly whiteAlpha950: "hsla(0, 0%, 100%, 0.92)";
    readonly neutralAlpha300: import("@clerk/types").HslaColorString;
    readonly neutralAlpha600: import("@clerk/types").HslaColorString;
    readonly neutralAlpha25: import("@clerk/types").HslaColorString;
    readonly neutralAlpha50: import("@clerk/types").HslaColorString;
    readonly neutralAlpha100: import("@clerk/types").HslaColorString;
    readonly neutralAlpha150: import("@clerk/types").HslaColorString;
    readonly neutralAlpha200: import("@clerk/types").HslaColorString;
    readonly neutralAlpha400: import("@clerk/types").HslaColorString;
    readonly neutralAlpha500: import("@clerk/types").HslaColorString;
    readonly neutralAlpha700: import("@clerk/types").HslaColorString;
    readonly neutralAlpha750: import("@clerk/types").HslaColorString;
    readonly neutralAlpha800: import("@clerk/types").HslaColorString;
    readonly neutralAlpha850: import("@clerk/types").HslaColorString;
    readonly neutralAlpha900: import("@clerk/types").HslaColorString;
    readonly neutralAlpha950: import("@clerk/types").HslaColorString;
    readonly avatarBorder: import("@clerk/types").HslaColorString;
    readonly avatarBackground: import("@clerk/types").HslaColorString;
    readonly colorModalBackdrop: string;
    readonly colorBackground: string;
    readonly colorInput: string;
    readonly colorForeground: string;
    readonly colorMutedForeground: string;
    readonly colorMuted: undefined;
    readonly colorRing: string;
    readonly colorInputForeground: string;
    readonly colorPrimaryForeground: string;
    readonly colorShimmer: string;
    readonly transparent: "transparent";
    readonly white: "white";
    readonly black: "black";
}>;
export { colors, neutralAlphaScale as neutralAlpha, whiteAlpha };
