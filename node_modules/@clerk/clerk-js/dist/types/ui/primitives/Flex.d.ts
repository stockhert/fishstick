import React from 'react';
import type { StateProps, StyleVariants } from '../styledSystem';
import type { BoxProps } from './Box';
declare const applyVariants: (props?: {
    direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
    align?: "center" | "end" | "start" | "baseline" | "stretch" | undefined;
    justify?: "center" | "end" | "start" | "between" | undefined;
    wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
    gap?: 4 | 2 | 1 | 3 | 5 | 6 | 7 | 8 | 9 | undefined;
    center?: boolean | undefined;
} | undefined) => (theme: import("../foundations").InternalTheme<Readonly<{
    readonly colors: Readonly<{
        readonly borderAlpha300: import("@clerk/types").HslaColorString;
        readonly borderAlpha600: import("@clerk/types").HslaColorString;
        readonly borderAlpha25: import("@clerk/types").HslaColorString;
        readonly borderAlpha50: import("@clerk/types").HslaColorString;
        readonly borderAlpha100: import("@clerk/types").HslaColorString;
        readonly borderAlpha150: import("@clerk/types").HslaColorString;
        readonly borderAlpha200: import("@clerk/types").HslaColorString;
        readonly borderAlpha400: import("@clerk/types").HslaColorString;
        readonly borderAlpha500: import("@clerk/types").HslaColorString;
        readonly borderAlpha700: import("@clerk/types").HslaColorString;
        readonly borderAlpha750: import("@clerk/types").HslaColorString;
        readonly borderAlpha800: import("@clerk/types").HslaColorString;
        readonly borderAlpha850: import("@clerk/types").HslaColorString;
        readonly borderAlpha900: import("@clerk/types").HslaColorString;
        readonly borderAlpha950: import("@clerk/types").HslaColorString;
        readonly successAlpha300: import("@clerk/types").HslaColorString;
        readonly successAlpha600: import("@clerk/types").HslaColorString;
        readonly successAlpha25: import("@clerk/types").HslaColorString;
        readonly successAlpha50: import("@clerk/types").HslaColorString;
        readonly successAlpha100: import("@clerk/types").HslaColorString;
        readonly successAlpha150: import("@clerk/types").HslaColorString;
        readonly successAlpha200: import("@clerk/types").HslaColorString;
        readonly successAlpha400: import("@clerk/types").HslaColorString;
        readonly successAlpha500: import("@clerk/types").HslaColorString;
        readonly successAlpha700: import("@clerk/types").HslaColorString;
        readonly successAlpha750: import("@clerk/types").HslaColorString;
        readonly successAlpha800: import("@clerk/types").HslaColorString;
        readonly successAlpha850: import("@clerk/types").HslaColorString;
        readonly successAlpha900: import("@clerk/types").HslaColorString;
        readonly successAlpha950: import("@clerk/types").HslaColorString;
        readonly success300: import("@clerk/types").HslaColorString;
        readonly success600: import("@clerk/types").HslaColorString;
        readonly success25: import("@clerk/types").HslaColorString;
        readonly success50: import("@clerk/types").HslaColorString;
        readonly success100: import("@clerk/types").HslaColorString;
        readonly success150: import("@clerk/types").HslaColorString;
        readonly success200: import("@clerk/types").HslaColorString;
        readonly success400: import("@clerk/types").HslaColorString;
        readonly success500: import("@clerk/types").HslaColorString;
        readonly success700: import("@clerk/types").HslaColorString;
        readonly success750: import("@clerk/types").HslaColorString;
        readonly success800: import("@clerk/types").HslaColorString;
        readonly success850: import("@clerk/types").HslaColorString;
        readonly success900: import("@clerk/types").HslaColorString;
        readonly success950: import("@clerk/types").HslaColorString;
        readonly warningAlpha300: import("@clerk/types").HslaColorString;
        readonly warningAlpha600: import("@clerk/types").HslaColorString;
        readonly warningAlpha25: import("@clerk/types").HslaColorString;
        readonly warningAlpha50: import("@clerk/types").HslaColorString;
        readonly warningAlpha100: import("@clerk/types").HslaColorString;
        readonly warningAlpha150: import("@clerk/types").HslaColorString;
        readonly warningAlpha200: import("@clerk/types").HslaColorString;
        readonly warningAlpha400: import("@clerk/types").HslaColorString;
        readonly warningAlpha500: import("@clerk/types").HslaColorString;
        readonly warningAlpha700: import("@clerk/types").HslaColorString;
        readonly warningAlpha750: import("@clerk/types").HslaColorString;
        readonly warningAlpha800: import("@clerk/types").HslaColorString;
        readonly warningAlpha850: import("@clerk/types").HslaColorString;
        readonly warningAlpha900: import("@clerk/types").HslaColorString;
        readonly warningAlpha950: import("@clerk/types").HslaColorString;
        readonly warning300: import("@clerk/types").HslaColorString;
        readonly warning600: import("@clerk/types").HslaColorString;
        readonly warning25: import("@clerk/types").HslaColorString;
        readonly warning50: import("@clerk/types").HslaColorString;
        readonly warning100: import("@clerk/types").HslaColorString;
        readonly warning150: import("@clerk/types").HslaColorString;
        readonly warning200: import("@clerk/types").HslaColorString;
        readonly warning400: import("@clerk/types").HslaColorString;
        readonly warning500: import("@clerk/types").HslaColorString;
        readonly warning700: import("@clerk/types").HslaColorString;
        readonly warning750: import("@clerk/types").HslaColorString;
        readonly warning800: import("@clerk/types").HslaColorString;
        readonly warning850: import("@clerk/types").HslaColorString;
        readonly warning900: import("@clerk/types").HslaColorString;
        readonly warning950: import("@clerk/types").HslaColorString;
        readonly dangerAlpha300: import("@clerk/types").HslaColorString;
        readonly dangerAlpha600: import("@clerk/types").HslaColorString;
        readonly dangerAlpha25: import("@clerk/types").HslaColorString;
        readonly dangerAlpha50: import("@clerk/types").HslaColorString;
        readonly dangerAlpha100: import("@clerk/types").HslaColorString;
        readonly dangerAlpha150: import("@clerk/types").HslaColorString;
        readonly dangerAlpha200: import("@clerk/types").HslaColorString;
        readonly dangerAlpha400: import("@clerk/types").HslaColorString;
        readonly dangerAlpha500: import("@clerk/types").HslaColorString;
        readonly dangerAlpha700: import("@clerk/types").HslaColorString;
        readonly dangerAlpha750: import("@clerk/types").HslaColorString;
        readonly dangerAlpha800: import("@clerk/types").HslaColorString;
        readonly dangerAlpha850: import("@clerk/types").HslaColorString;
        readonly dangerAlpha900: import("@clerk/types").HslaColorString;
        readonly dangerAlpha950: import("@clerk/types").HslaColorString;
        readonly danger300: import("@clerk/types").HslaColorString;
        readonly danger600: import("@clerk/types").HslaColorString;
        readonly danger25: import("@clerk/types").HslaColorString;
        readonly danger50: import("@clerk/types").HslaColorString;
        readonly danger100: import("@clerk/types").HslaColorString;
        readonly danger150: import("@clerk/types").HslaColorString;
        readonly danger200: import("@clerk/types").HslaColorString;
        readonly danger400: import("@clerk/types").HslaColorString;
        readonly danger500: import("@clerk/types").HslaColorString;
        readonly danger700: import("@clerk/types").HslaColorString;
        readonly danger750: import("@clerk/types").HslaColorString;
        readonly danger800: import("@clerk/types").HslaColorString;
        readonly danger850: import("@clerk/types").HslaColorString;
        readonly danger900: import("@clerk/types").HslaColorString;
        readonly danger950: import("@clerk/types").HslaColorString;
        readonly primaryAlpha300: import("@clerk/types").HslaColorString;
        readonly primaryAlpha600: import("@clerk/types").HslaColorString;
        readonly primaryAlpha25: import("@clerk/types").HslaColorString;
        readonly primaryAlpha50: import("@clerk/types").HslaColorString;
        readonly primaryAlpha100: import("@clerk/types").HslaColorString;
        readonly primaryAlpha150: import("@clerk/types").HslaColorString;
        readonly primaryAlpha200: import("@clerk/types").HslaColorString;
        readonly primaryAlpha400: import("@clerk/types").HslaColorString;
        readonly primaryAlpha500: import("@clerk/types").HslaColorString;
        readonly primaryAlpha700: import("@clerk/types").HslaColorString;
        readonly primaryAlpha750: import("@clerk/types").HslaColorString;
        readonly primaryAlpha800: import("@clerk/types").HslaColorString;
        readonly primaryAlpha850: import("@clerk/types").HslaColorString;
        readonly primaryAlpha900: import("@clerk/types").HslaColorString;
        readonly primaryAlpha950: import("@clerk/types").HslaColorString;
        readonly primaryHover: string | undefined;
        readonly primary300: import("@clerk/types").HslaColorString;
        readonly primary600: import("@clerk/types").HslaColorString;
        readonly primary25: import("@clerk/types").HslaColorString;
        readonly primary50: import("@clerk/types").HslaColorString;
        readonly primary100: import("@clerk/types").HslaColorString;
        readonly primary150: import("@clerk/types").HslaColorString;
        readonly primary200: import("@clerk/types").HslaColorString;
        readonly primary400: import("@clerk/types").HslaColorString;
        readonly primary500: import("@clerk/types").HslaColorString;
        readonly primary700: import("@clerk/types").HslaColorString;
        readonly primary750: import("@clerk/types").HslaColorString;
        readonly primary800: import("@clerk/types").HslaColorString;
        readonly primary850: import("@clerk/types").HslaColorString;
        readonly primary900: import("@clerk/types").HslaColorString;
        readonly primary950: import("@clerk/types").HslaColorString;
        readonly whiteAlpha25: "hsla(0, 0%, 100%, 0.02)";
        readonly whiteAlpha50: "hsla(0, 0%, 100%, 0.03)";
        readonly whiteAlpha100: "hsla(0, 0%, 100%, 0.07)";
        readonly whiteAlpha150: "hsla(0, 0%, 100%, 0.11)";
        readonly whiteAlpha200: "hsla(0, 0%, 100%, 0.15)";
        readonly whiteAlpha300: "hsla(0, 0%, 100%, 0.28)";
        readonly whiteAlpha400: "hsla(0, 0%, 100%, 0.41)";
        readonly whiteAlpha500: "hsla(0, 0%, 100%, 0.53)";
        readonly whiteAlpha600: "hsla(0, 0%, 100%, 0.62)";
        readonly whiteAlpha700: "hsla(0, 0%, 100%, 0.73)";
        readonly whiteAlpha750: "hsla(0, 0%, 100%, 0.78)";
        readonly whiteAlpha800: "hsla(0, 0%, 100%, 0.81)";
        readonly whiteAlpha850: "hsla(0, 0%, 100%, 0.84)";
        readonly whiteAlpha900: "hsla(0, 0%, 100%, 0.87)";
        readonly whiteAlpha950: "hsla(0, 0%, 100%, 0.92)";
        readonly neutralAlpha300: import("@clerk/types").HslaColorString;
        readonly neutralAlpha600: import("@clerk/types").HslaColorString;
        readonly neutralAlpha25: import("@clerk/types").HslaColorString;
        readonly neutralAlpha50: import("@clerk/types").HslaColorString;
        readonly neutralAlpha100: import("@clerk/types").HslaColorString;
        readonly neutralAlpha150: import("@clerk/types").HslaColorString;
        readonly neutralAlpha200: import("@clerk/types").HslaColorString;
        readonly neutralAlpha400: import("@clerk/types").HslaColorString;
        readonly neutralAlpha500: import("@clerk/types").HslaColorString;
        readonly neutralAlpha700: import("@clerk/types").HslaColorString;
        readonly neutralAlpha750: import("@clerk/types").HslaColorString;
        readonly neutralAlpha800: import("@clerk/types").HslaColorString;
        readonly neutralAlpha850: import("@clerk/types").HslaColorString;
        readonly neutralAlpha900: import("@clerk/types").HslaColorString;
        readonly neutralAlpha950: import("@clerk/types").HslaColorString;
        readonly avatarBorder: import("@clerk/types").HslaColorString;
        readonly avatarBackground: import("@clerk/types").HslaColorString;
        readonly colorModalBackdrop: string;
        readonly colorBackground: string;
        readonly colorInput: string;
        readonly colorForeground: string;
        readonly colorMutedForeground: string;
        readonly colorMuted: undefined;
        readonly colorRing: string;
        readonly colorInputForeground: string;
        readonly colorPrimaryForeground: string;
        readonly colorShimmer: string;
        readonly transparent: "transparent";
        readonly white: "white";
        readonly black: "black";
    }>;
    readonly fonts: Readonly<{
        readonly main: string;
        readonly buttons: string;
    }>;
    readonly fontStyles: Readonly<{
        readonly normal: "normal";
    }>;
    readonly fontSizes: Readonly<{
        readonly xs: string;
        readonly sm: string;
        readonly md: string;
        readonly lg: string;
        readonly xl: string;
    }>;
    readonly fontWeights: Readonly<{
        readonly normal: string;
        readonly medium: string;
        readonly semibold: string;
        readonly bold: string;
    }>;
    readonly letterSpacings: Readonly<{
        readonly normal: "normal";
    }>;
    readonly lineHeights: Readonly<{
        readonly normal: "normal";
        readonly extraSmall: "1.33333";
        readonly small: "1.38462";
        readonly medium: "1.41176";
        readonly large: "1.45455";
    }>;
    readonly radii: Readonly<{
        readonly none: "0px";
        readonly circle: "50%";
        readonly avatar: string;
        readonly sm: string;
        readonly md: string;
        readonly lg: string;
        readonly xl: string;
        readonly halfHeight: "99999px";
    }>;
    readonly sizes: Readonly<{
        readonly '0x25': "0.0625rem";
        readonly '0x5': "0.125rem";
        readonly '1': "0.25rem";
        readonly '1x5': "0.375rem";
        readonly '2': "0.5rem";
        readonly '2x5': "0.625rem";
        readonly '3': "0.75rem";
        readonly '3x25': "0.8125rem";
        readonly '3x5': "0.875rem";
        readonly '4': "1rem";
        readonly '4x25': "1.0625rem";
        readonly '4x5': "1.125rem";
        readonly '5': "1.25rem";
        readonly '5x5': "1.375rem";
        readonly '6': "1.5rem";
        readonly '7': "1.75rem";
        readonly '7x5': "1.875rem";
        readonly '8': "2rem";
        readonly '8x5': "2.125rem";
        readonly '8x75': "2.1875rem";
        readonly '9': "2.25rem";
        readonly '10': "2.5rem";
        readonly '12': "3rem";
        readonly '13': "3.5rem";
        readonly '16': "4rem";
        readonly '17': "4.25rem";
        readonly '20': "5rem";
        readonly '24': "6rem";
        readonly '28': "7rem";
        readonly '32': "8rem";
        readonly '36': "9rem";
        readonly '40': "10rem";
        readonly '44': "11rem";
        readonly '48': "12rem";
        readonly '52': "13rem";
        readonly '56': "14rem";
        readonly '57': "14.25rem";
        readonly '60': "15rem";
        readonly '66': "16.5rem";
        readonly '94': "23.5rem";
        readonly '100': "25rem";
        readonly '108': "27rem";
        readonly '120': "30rem";
        readonly '140': "35rem";
        readonly '160': "40rem";
        readonly '176': "44rem";
        readonly '220': "55rem";
        readonly none: "0";
        readonly xxs: "0.5px";
        readonly px: "1px";
    }>;
    readonly space: Readonly<{
        readonly 1: string;
        readonly 2: string;
        readonly 3: string;
        readonly 4: string;
        readonly 5: string;
        readonly 6: string;
        readonly 7: string;
        readonly 8: string;
        readonly 9: string;
        readonly 100: string;
        readonly 10: string;
        readonly 12: string;
        readonly 13: string;
        readonly "0x25": string;
        readonly "0x5": string;
        readonly "1x5": string;
        readonly "2x5": string;
        readonly "3x25": string;
        readonly "3x5": string;
        readonly "4x25": string;
        readonly "4x5": string;
        readonly "5x5": string;
        readonly "7x5": string;
        readonly "8x5": string;
        readonly "8x75": string;
        readonly 16: string;
        readonly 17: string;
        readonly 20: string;
        readonly 24: string;
        readonly 28: string;
        readonly 32: string;
        readonly 36: string;
        readonly 40: string;
        readonly 44: string;
        readonly 48: string;
        readonly 52: string;
        readonly 56: string;
        readonly 57: string;
        readonly 60: string;
        readonly 66: string;
        readonly 94: string;
        readonly 108: string;
        readonly 120: string;
        readonly 140: string;
        readonly 160: string;
        readonly 176: string;
        readonly 220: string;
        readonly none: "0";
        readonly xxs: "0.5px";
        readonly px: "1px";
    }>;
    readonly shadows: Readonly<{
        menuShadow: string;
        fabShadow: string;
        buttonShadow: string;
        cardBoxShadow: string;
        cardContentShadow: string;
        actionCardShadow: string;
        outlineButtonShadow: string;
        input: string;
        focusRing: string;
        badge: string;
        tableBodyShadow: string;
        segmentedControl: string;
        switchControl: string;
    }>;
    readonly transitionProperty: Readonly<{
        readonly common: "background-color,background,border-color,color,fill,stroke,opacity,box-shadow,transform";
    }>;
    readonly transitionTiming: Readonly<{
        readonly common: "ease";
        readonly easeOut: "ease-out";
        readonly bezier: "cubic-bezier(0.32, 0.72, 0, 1)";
        readonly slowBezier: "cubic-bezier(0.16, 1, 0.3, 1)";
    }>;
    readonly transitionDuration: Readonly<Record<"focusRing" | "slowest" | "slower" | "slow" | "fast" | "controls" | "textField" | "drawer", string>>;
    readonly transitionDurationValues: Readonly<{
        readonly slowest: 600;
        readonly slower: 280;
        readonly slow: 200;
        readonly fast: 120;
        readonly focusRing: 200;
        readonly controls: 100;
        readonly textField: 450;
        readonly drawer: 500;
    }>;
    readonly opacity: Readonly<{
        readonly sm: "24%";
        readonly disabled: "50%";
        readonly inactive: "62%";
    }>;
    readonly borderStyles: Readonly<{
        readonly solid: "solid";
        readonly dashed: "dashed";
    }>;
    readonly borderWidths: Readonly<{
        normal: "1px";
        heavy: "2px";
    }>;
    readonly zIndices: Readonly<{
        readonly card: "10";
        readonly navbar: "100";
        readonly fab: "9000";
        readonly modal: "10000";
        readonly dropdown: "11000";
    }>;
}>>) => import("../styledSystem").StyleRule;
export type FlexProps = StateProps & BoxProps & StyleVariants<typeof applyVariants>;
export declare const Flex: React.ForwardRefExoticComponent<Omit<FlexProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
export declare const Col: React.ForwardRefExoticComponent<Omit<FlexProps, "ref"> & React.RefAttributes<HTMLDivElement>>;
export {};
