/**
 * @internal
 */
export declare const useOrganizationListInView: () => {
    userMemberships: {
        data: undefined;
        count: undefined;
        error: undefined;
        isLoading: false;
        isFetching: false;
        isError: false;
        page: undefined;
        pageCount: undefined;
        fetchPage: undefined;
        fetchPrevious: undefined;
        fetchNext: undefined;
        hasNextPage: false;
        hasPreviousPage: false;
        revalidate: undefined;
        setData: undefined;
    } | {
        data: import("@clerk/types").OrganizationMembershipResource[];
        count: number;
        error: import("@clerk/shared/error").ClerkAPIResponseError | null;
        isLoading: boolean;
        isFetching: boolean;
        isError: boolean;
        page: number;
        pageCount: number;
        fetchPage: (size: number | ((_size: number) => number)) => void;
        fetchPrevious: () => void;
        fetchNext: () => void;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        revalidate: () => Promise<void>;
        setData: (data?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | ((currentData?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | undefined) => (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | undefined> | undefined) | undefined) => Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | undefined>;
    };
    userInvitations: {
        data: undefined;
        count: undefined;
        error: undefined;
        isLoading: false;
        isFetching: false;
        isError: false;
        page: undefined;
        pageCount: undefined;
        fetchPage: undefined;
        fetchPrevious: undefined;
        fetchNext: undefined;
        hasNextPage: false;
        hasPreviousPage: false;
        revalidate: undefined;
        setData: undefined;
    } | {
        data: import("@clerk/types").UserOrganizationInvitationResource[];
        count: number;
        error: import("@clerk/shared/error").ClerkAPIResponseError | null;
        isLoading: boolean;
        isFetching: boolean;
        isError: boolean;
        page: number;
        pageCount: number;
        fetchPage: (size: number | ((_size: number) => number)) => void;
        fetchPrevious: () => void;
        fetchNext: () => void;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        revalidate: () => Promise<void>;
        setData: (data?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | undefined)[] | ((currentData?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | undefined)[] | undefined) => (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | undefined)[] | Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | undefined)[] | undefined> | undefined) | undefined) => Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | undefined)[] | undefined>;
    };
    userSuggestions: {
        data: undefined;
        count: undefined;
        error: undefined;
        isLoading: false;
        isFetching: false;
        isError: false;
        page: undefined;
        pageCount: undefined;
        fetchPage: undefined;
        fetchPrevious: undefined;
        fetchNext: undefined;
        hasNextPage: false;
        hasPreviousPage: false;
        revalidate: undefined;
        setData: undefined;
    } | {
        data: import("@clerk/types").OrganizationSuggestionResource[];
        count: number;
        error: import("@clerk/shared/error").ClerkAPIResponseError | null;
        isLoading: boolean;
        isFetching: boolean;
        isError: boolean;
        page: number;
        pageCount: number;
        fetchPage: (size: number | ((_size: number) => number)) => void;
        fetchPrevious: () => void;
        fetchNext: () => void;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        revalidate: () => Promise<void>;
        setData: (data?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | undefined)[] | ((currentData?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | undefined)[] | undefined) => (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | undefined)[] | Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | undefined)[] | undefined> | undefined) | undefined) => Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | undefined)[] | undefined>;
    };
    ref: (element: HTMLElement | null) => void;
};
