"use strict";(globalThis.webpackChunk_clerk_clerk_js=globalThis.webpackChunk_clerk_clerk_js||[]).push([["785"],{3656:function(e,t,i){i.d(t,{getDebugLogger:()=>h}),i(5100);class r{logLevel;transport;constructor(e,t){this.transport=e,this.logLevel=t??"debug"}debug(e,t,i){this.log("debug",e,t,i)}error(e,t,i){this.log("error",e,t,i)}info(e,t,i){this.log("info",e,t,i)}warn(e,t,i){this.log("warn",e,t,i)}log(e,t,i,r){if(!this.shouldLogLevel(e))return;let s={timestamp:Date.now(),level:e,message:t,context:i,source:r};this.transport.send(s).catch(e=>{console.error("Failed to send log entry:",e)})}shouldLogLevel(e){let t=["error","warn","info","debug"],i=t.indexOf(this.logLevel);return t.indexOf(e)<=i}}class s{transports;constructor(e){this.transports=e}async send(e){let t=this.transports.map(t=>t.send(e).catch(e=>{console.error("Failed to send to transport:",e)}));await Promise.allSettled(t)}}let o="\x1b[2m",n="\x1b[0m",l="\x1b[37m",a={debug:"\x1b[32m",error:"\x1b[31m",info:"\x1b[34m",warn:"\x1b[33m"};class c{send(e){let t=new Date(e.timestamp).toISOString(),i=e.level.toUpperCase(),r=e.source?`[${e.source}]`:"",s=e.context?` ${JSON.stringify(e.context)}`:"",c=a[e.level]||l,g=`\x1b[1m\x1b[36m[Clerk Debug]${n}`,u=`${o}${t}${n}`,h=`${c}${i}${n}`,d=r?`\x1b[90m${r}${n}`:"",m=`${l}${e.message}${n}`,b=s?`${o}${s}${n}`:"",p=`${g} ${u} ${h}${d}: ${m}${b}`;switch(e.level){case"error":console.error(p);break;case"warn":console.warn(p);break;case"info":console.info(p);break;case"debug":console.debug(p);break;default:console.log(p)}return Promise.resolve()}}class g{collector;constructor(e){this.collector=e}async send(e){this.collector&&await Promise.resolve(this.collector.recordLog({context:e.context,level:e.level,message:e.message,organizationId:e.organizationId,sessionId:e.sessionId,source:e.source,timestamp:e.timestamp,userId:e.userId}))}}class u{static instance;initialized=!1;logger=null;initializationPromise=null;constructor(){}static getInstance(){return u.instance||(u.instance=new u),u.instance}async initialize(e={}){return this.initialized?this.logger:(this.initializationPromise||(this.initializationPromise=this.performInitialization(e)),this.initializationPromise)}async performInitialization(e){try{if(e.logLevel&&"string"!=typeof e.logLevel)throw Error("logLevel must be a string");let{logLevel:t,telemetryCollector:i}=e,o=[{transport:new c},...i?[{transport:new g(i)}]:[]].map(e=>e.transport),n=new s(o),l=new r(n,t??"info");return this.logger=l,this.initialized=!0,this.logger}catch(e){return console.error("Failed to initialize debug module:",e),this.initializationPromise=null,null}}getLogger(){return this.logger}isInitialized(){return this.initialized}reset(){this.initialized=!1,this.logger=null,this.initializationPromise=null}}async function h(e={}){return u.getInstance().initialize(e)}}}]);